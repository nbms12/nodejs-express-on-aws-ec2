pipeline {
    agent any
    tools {
        nodejs 'nodejs23'
    }
    environment {
        SCANNER_HOME = tool 'sonarscanner'
    }
    stages {
        stage('git checkout') {
            steps {
                git branch: 'dev', url: 'https://github.com/jaiswaladi246/3-Tier-DevSecOps-Mega-Project.git'
            }
        }
        stage('fronend-cmpile') {
            steps {
               dir('client') {
                 sh 'find . -name "*.js" -exec node --check {} +'
               }
            }
        }
        stage('backend -compile') {
            steps {
                dir('api') {
                 sh 'find . -name "*.js" -exec node --check {} +'
               }
            }
        }
         stage('git leaks scan') {
            steps {
                sh 'gitleaks detect --source ./client --exit-code 100'
                sh 'gitleaks detect --source ./api --exit-code 100'
            }
        }
        stage('sonarkube scan') {
            steps {
                withSonarQubeEnv('sonar') {
                  sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=NodeJS-Project \
                            -Dsonar.projectKey=NodeJS-Project '''
               }
            }
        }
        // stage('SCANNER-QUALITY-SCORE') {
        //     steps {
        //         //git branch: 'dev', url: 'https://github.com/jaiswaladi246/3-Tier-DevSecOps-Mega-Project.git'
        //          timeout(time: 1, unit: 'HOURS') {
        //           // some block
        //           waitForQualityGate abortPipeline: false, credentialsId: 'sonarcred'
        //       }
        //     }
        // }
        stage('trivy scan') {
            steps {
                sh 'trivy fs --format table -o myreport.html .'
            }
        }
        stage('build docker  for backend api ') {
            steps {
                 script{
                     withDockerRegistry(credentialsId: 'docker-re-cred') {
                      dir('api') {
                          sh 'docker build -t manju811/backend:latest .'
                          sh 'trivy image --format table -o myreportapi.html manju811/backend:latest'
                          sh 'docker push manju811/backend:latest'
                          
                        }
                     }
                 }
            }
        }
        stage('build docker  for frontend-user ') {
            steps {
                 script{
                     withDockerRegistry(credentialsId: 'docker-re-cred') {
                      dir('api') {
                          sh 'docker build -t manju811/frontend:latest .'
                          sh 'trivy image --format table -o myreportfrontend.html manju811/frontend:latest'
                          sh 'docker push manju811/frontend:latest'
                          
                        }
                     }
                 }
            }
        }
         stage('docker deploy via docker compose  ') {
            steps {
                 script{
                     sh 'docker-compose up -d'
                 }
            }
         }
    } 
}
